<?php

namespace CodeCats\PanelBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * UserRepository. Nested query example:
 *
 *

$qb = $this->createQueryBuilder('u');
$qb2 = $this->createQueryBuilder('u2');
$qb2->select('us.id')->from('CodeCatsPanelBundle:User', 'us')->where('us.id = 2');

$qb->select('u', 'p')->addSelect('SUM(DATEDIFF(p.ended, p.started)) as progress_days')
->leftJoin('u.progresses', 'p')
->where(
$qb->expr()->notIn('u.id', $qb2->getDQL())
)
->groupBy('u.id')->orderBy('progress_days', 'desc')->setMaxResults($max);


echo '<br><br><br><br><br><br>';
echo $qb->getQuery()->getSQL();

return $qb->getQuery()->getResult();

 *
 *
 *
 *
 *
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function findFavoriteCategory($id, $limit)
    {
        $qb = $this->getEntityManager()->getRepository('CodeCatsPanelBundle:Progress')->createQueryBuilder('p')
            ->select('p as progress')->addSelect('SUM(DATEDIFF(p.ended, p.started)) as time')
            ->leftJoin('p.user', 'u')->leftJoin('p.category', 'c')->where('u.id = :id')
            ->groupBy('c.id')->orderBy('time', 'DESC')
            ->setMaxResults($limit);

        $qb->setParameter('id', $id);

        return $qb->getQuery()->getResult();
    }
    public function findProgressTime($id, $limit)
    {
        $qb = $this->createQueryBuilder('u')->select('u')->addSelect('SUM(DATEDIFF(p.ended, p.started)) as time')
            ->leftJoin('u.progresses', 'p')->where('u.id = :id')->setMaxResults($limit);
        $qb->setParameter('id', $id);

        return $qb->getQuery()->getSingleResult();
    }
    /**
    SELECT *, sum(datediff(p.ended, p.started)) as progress_days FROM User u
    left join Progress p
    on  p.user_id = u.id
    group by u.id
    order by progress_days DESC
     *
     * @param int $max
     * @return array
     */
    public function findMostActive($max = 10)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select('u', 'p')->addSelect('SUM(DATEDIFF(p.ended, p.started)) as progress_days')
            ->leftJoin('u.progresses', 'p')
            ->groupBy('u.id')->orderBy('progress_days', 'desc')->setMaxResults($max);

        return $qb->getQuery()->getResult();
    }
}
